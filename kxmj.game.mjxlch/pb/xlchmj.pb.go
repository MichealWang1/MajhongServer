// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: pb/xlchmj.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MID int32

const (
	MID_INVALID                           MID = 0     // 无效消息
	MID_PLAYER_ENTER_INFO_NOTIFY          MID = 10001 // 玩家进入信息 GamePlayerEnterInfoNotify
	MID_DESK_INFO                         MID = 10002 // 请求桌子信息 (GameDeskInfoRequest,GameDeskInfoResponse)
	MID_PLAYER_READY                      MID = 10003 // 准备 (GamePlayerReadyRequest，GamePlayerReadyResponse)
	MID_GAME_START                        MID = 10004 // 游戏开始 GameStartNotify
	MID_GAME_STATE                        MID = 10005 // 游戏状态 GameStateNotify
	MID_DEAL_HAND_CARDS_NOTIFY            MID = 10006 // 广播发牌 GameDealHandCardsNotify
	MID_UPDATE_PLAYER_CARDS_DETAIL_NOTIFY MID = 10007 // 更新手牌 GameUpdateMahjongResponse
	MID_CATCH_CARD_NOTIFY                 MID = 10008 // 玩家抓牌 GamePlayerCatchCard
	MID_SWAP_NOTIFY                       MID = 10009 // 通知玩家换牌 GamePlayerSwapNotify
	MID_SWAP_INFO                         MID = 10010 // 玩家换牌 (GamePlayerSwapRequest,GamePlayerSwapResponse)
	MID_SWAP_RESULT_NOTIFY                MID = 10012 // 换牌类型 GameSwapResultNotify
	MID_CHOOSE_MISS_NOTIFY                MID = 10013 // 通知玩家选缺 GamePlayerChooseMissNotify
	MID_CHOOSE_MISS_INFO                  MID = 10014 // 玩家选缺 (GamePlayerChooseMissRequest,GamePlayerChooseMissResponse)
	MID_CHOOSE_MISS_RESULT_NOTIFY         MID = 10016 // 玩家选缺结束通知 GamePlayerChooseMissResultNotify
	MID_OUT_CARD_NOTIFY                   MID = 10017 // 通知玩家出牌 GamePlayerOutCardNotify
	MID_OUT_CARD_INFO                     MID = 10018 // 玩家出牌请求 (GamePlayerOutCardRequest,GamePlayerOutCardResponse)
	MID_ACTIONS_NOTIFY                    MID = 10020 // 通知玩家处理动作 GamePlayerActionNotify
	MID_ACTIONS_INFO                      MID = 10021 // 玩家处理动作 (GamePlayerActionRequest,GamePlayerActionResponse)
	MID_TING_3N2_NOTIFY                   MID = 10022 // 3n+2听牌提示 GameTing3N2InfoNotify
	MID_TING_3N1_NOTIFY                   MID = 10023 // 3n+1听牌提示 GameTing3N1InfoNotify
	MID_UPDATE_GOLD_NUMBER                MID = 19993 // 更新玩家金币 GameUpdateGoldNumberNotify
	MID_PLAYER_AUTO_INFO                  MID = 19994 // 玩家自动请求（托管、自动胡） (GamePlayerAutoRequest,GamePlayerAutoResponse)
	MID_PLAYER_STATUS                     MID = 19996 // 广播玩家游戏内状态；胡、听 GamePlayerStatusResponse
	MID_ERROR_MESSAGE                     MID = 19997 // 错误响应 GameErrorResponse
	MID_SETTLEMENT_BUREAU                 MID = 19998 // 局内结算 GameBureauSettlement
	MID_SETTLEMENT_END                    MID = 19999 // 游戏结束结算 GameEndSettlement
	MID_FORCE_END                         MID = 20001 // 强制结束ForceEnd (GameForceEndRequest,GameForceEndResponse)
)

// Enum value maps for MID.
var (
	MID_name = map[int32]string{
		0:     "INVALID",
		10001: "PLAYER_ENTER_INFO_NOTIFY",
		10002: "DESK_INFO",
		10003: "PLAYER_READY",
		10004: "GAME_START",
		10005: "GAME_STATE",
		10006: "DEAL_HAND_CARDS_NOTIFY",
		10007: "UPDATE_PLAYER_CARDS_DETAIL_NOTIFY",
		10008: "CATCH_CARD_NOTIFY",
		10009: "SWAP_NOTIFY",
		10010: "SWAP_INFO",
		10012: "SWAP_RESULT_NOTIFY",
		10013: "CHOOSE_MISS_NOTIFY",
		10014: "CHOOSE_MISS_INFO",
		10016: "CHOOSE_MISS_RESULT_NOTIFY",
		10017: "OUT_CARD_NOTIFY",
		10018: "OUT_CARD_INFO",
		10020: "ACTIONS_NOTIFY",
		10021: "ACTIONS_INFO",
		10022: "TING_3N2_NOTIFY",
		10023: "TING_3N1_NOTIFY",
		19993: "UPDATE_GOLD_NUMBER",
		19994: "PLAYER_AUTO_INFO",
		19996: "PLAYER_STATUS",
		19997: "ERROR_MESSAGE",
		19998: "SETTLEMENT_BUREAU",
		19999: "SETTLEMENT_END",
		20001: "FORCE_END",
	}
	MID_value = map[string]int32{
		"INVALID":                           0,
		"PLAYER_ENTER_INFO_NOTIFY":          10001,
		"DESK_INFO":                         10002,
		"PLAYER_READY":                      10003,
		"GAME_START":                        10004,
		"GAME_STATE":                        10005,
		"DEAL_HAND_CARDS_NOTIFY":            10006,
		"UPDATE_PLAYER_CARDS_DETAIL_NOTIFY": 10007,
		"CATCH_CARD_NOTIFY":                 10008,
		"SWAP_NOTIFY":                       10009,
		"SWAP_INFO":                         10010,
		"SWAP_RESULT_NOTIFY":                10012,
		"CHOOSE_MISS_NOTIFY":                10013,
		"CHOOSE_MISS_INFO":                  10014,
		"CHOOSE_MISS_RESULT_NOTIFY":         10016,
		"OUT_CARD_NOTIFY":                   10017,
		"OUT_CARD_INFO":                     10018,
		"ACTIONS_NOTIFY":                    10020,
		"ACTIONS_INFO":                      10021,
		"TING_3N2_NOTIFY":                   10022,
		"TING_3N1_NOTIFY":                   10023,
		"UPDATE_GOLD_NUMBER":                19993,
		"PLAYER_AUTO_INFO":                  19994,
		"PLAYER_STATUS":                     19996,
		"ERROR_MESSAGE":                     19997,
		"SETTLEMENT_BUREAU":                 19998,
		"SETTLEMENT_END":                    19999,
		"FORCE_END":                         20001,
	}
)

func (x MID) Enum() *MID {
	p := new(MID)
	*p = x
	return p
}

func (x MID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MID) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[0].Descriptor()
}

func (MID) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[0]
}

func (x MID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MID.Descriptor instead.
func (MID) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{0}
}

type GameState int32

const (
	GameState_UNKNOWN         GameState = 0  // 未知状态
	GameState_MATCH           GameState = 1  // 匹配状态
	GameState_READY           GameState = 2  // 准备状态
	GameState_DICE            GameState = 3  // 掷骰子状态
	GameState_DEAL_HAND_CARDS GameState = 4  // 发牌状态
	GameState_SWAP            GameState = 5  // 换牌状态
	GameState_CHOOSE_MISS     GameState = 6  // 选缺状态
	GameState_PLAY            GameState = 7  // 游戏状态
	GameState_OPERATE         GameState = 8  // 动作操作状态
	GameState_SETTLEMENT      GameState = 9  // 结算状态
	GameState_END             GameState = 10 // 结束状态
	GameState_PAUSE           GameState = 11 // 暂停状态
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "MATCH",
		2:  "READY",
		3:  "DICE",
		4:  "DEAL_HAND_CARDS",
		5:  "SWAP",
		6:  "CHOOSE_MISS",
		7:  "PLAY",
		8:  "OPERATE",
		9:  "SETTLEMENT",
		10: "END",
		11: "PAUSE",
	}
	GameState_value = map[string]int32{
		"UNKNOWN":         0,
		"MATCH":           1,
		"READY":           2,
		"DICE":            3,
		"DEAL_HAND_CARDS": 4,
		"SWAP":            5,
		"CHOOSE_MISS":     6,
		"PLAY":            7,
		"OPERATE":         8,
		"SETTLEMENT":      9,
		"END":             10,
		"PAUSE":           11,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[1].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[1]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{1}
}

// 更新手牌类型
type UpdateMahjongType int32

const (
	UpdateMahjongType_UPDATE_INVALID        UpdateMahjongType = 0 // 未知更新
	UpdateMahjongType_UPDATE_DEAL_HAND_CARD UpdateMahjongType = 1 // 发牌更新
	UpdateMahjongType_UPDATE_SWAP           UpdateMahjongType = 2 // 换牌更新
	UpdateMahjongType_UPDATE_CATCH          UpdateMahjongType = 3 // 抓牌更新
	UpdateMahjongType_UPDATE_OUT_CARD       UpdateMahjongType = 4 // 出牌更新
	UpdateMahjongType_UPDATE_ACTION         UpdateMahjongType = 5 // 吃碰杠更新
	UpdateMahjongType_UPDATE_ERROR          UpdateMahjongType = 6 // 错误更新
)

// Enum value maps for UpdateMahjongType.
var (
	UpdateMahjongType_name = map[int32]string{
		0: "UPDATE_INVALID",
		1: "UPDATE_DEAL_HAND_CARD",
		2: "UPDATE_SWAP",
		3: "UPDATE_CATCH",
		4: "UPDATE_OUT_CARD",
		5: "UPDATE_ACTION",
		6: "UPDATE_ERROR",
	}
	UpdateMahjongType_value = map[string]int32{
		"UPDATE_INVALID":        0,
		"UPDATE_DEAL_HAND_CARD": 1,
		"UPDATE_SWAP":           2,
		"UPDATE_CATCH":          3,
		"UPDATE_OUT_CARD":       4,
		"UPDATE_ACTION":         5,
		"UPDATE_ERROR":          6,
	}
)

func (x UpdateMahjongType) Enum() *UpdateMahjongType {
	p := new(UpdateMahjongType)
	*p = x
	return p
}

func (x UpdateMahjongType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMahjongType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[2].Descriptor()
}

func (UpdateMahjongType) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[2]
}

func (x UpdateMahjongType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMahjongType.Descriptor instead.
func (UpdateMahjongType) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{2}
}

// 动作类型
type ActionType int32

const (
	ActionType_ACTION_INVALID ActionType = 0 // 未知操作
	ActionType_ACTION_PASS    ActionType = 1 // 过操作
	ActionType_ACTION_CHI     ActionType = 2 // 吃操作
	ActionType_ACTION_PENG    ActionType = 3 // 碰操作
	ActionType_ACTION_GANG    ActionType = 4 // 杠操作
	ActionType_ACTION_HU      ActionType = 5 // 胡操作
	ActionType_ACTION_TING    ActionType = 6 // 听操作
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "ACTION_INVALID",
		1: "ACTION_PASS",
		2: "ACTION_CHI",
		3: "ACTION_PENG",
		4: "ACTION_GANG",
		5: "ACTION_HU",
		6: "ACTION_TING",
	}
	ActionType_value = map[string]int32{
		"ACTION_INVALID": 0,
		"ACTION_PASS":    1,
		"ACTION_CHI":     2,
		"ACTION_PENG":    3,
		"ACTION_GANG":    4,
		"ACTION_HU":      5,
		"ACTION_TING":    6,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[3].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[3]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{3}
}

type ActionExtType int32

const (
	ActionExtType_ACTION_EXT_NULL ActionExtType = 0 // 空操作
	ActionExtType_ACTION_EXT_MING ActionExtType = 1 // 明杠
	ActionExtType_ACTION_EXT_BU   ActionExtType = 2 // 补杠
	ActionExtType_ACTION_EXT_AN   ActionExtType = 3 // 暗杠
)

// Enum value maps for ActionExtType.
var (
	ActionExtType_name = map[int32]string{
		0: "ACTION_EXT_NULL",
		1: "ACTION_EXT_MING",
		2: "ACTION_EXT_BU",
		3: "ACTION_EXT_AN",
	}
	ActionExtType_value = map[string]int32{
		"ACTION_EXT_NULL": 0,
		"ACTION_EXT_MING": 1,
		"ACTION_EXT_BU":   2,
		"ACTION_EXT_AN":   3,
	}
)

func (x ActionExtType) Enum() *ActionExtType {
	p := new(ActionExtType)
	*p = x
	return p
}

func (x ActionExtType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionExtType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[4].Descriptor()
}

func (ActionExtType) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[4]
}

func (x ActionExtType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionExtType.Descriptor instead.
func (ActionExtType) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{4}
}

// 换三张类型枚举
type SwapType int32

const (
	SwapType_SWAP_TYPE_INVALID  SwapType = 0 // 未知
	SwapType_SWAP_TYPE_NEXT     SwapType = 1 // 下家
	SwapType_SWAP_TYPE_PREV     SwapType = 2 // 上家
	SwapType_SWAP_TYPE_OPPOSITE SwapType = 3 // 对家
)

// Enum value maps for SwapType.
var (
	SwapType_name = map[int32]string{
		0: "SWAP_TYPE_INVALID",
		1: "SWAP_TYPE_NEXT",
		2: "SWAP_TYPE_PREV",
		3: "SWAP_TYPE_OPPOSITE",
	}
	SwapType_value = map[string]int32{
		"SWAP_TYPE_INVALID":  0,
		"SWAP_TYPE_NEXT":     1,
		"SWAP_TYPE_PREV":     2,
		"SWAP_TYPE_OPPOSITE": 3,
	}
)

func (x SwapType) Enum() *SwapType {
	p := new(SwapType)
	*p = x
	return p
}

func (x SwapType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwapType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[5].Descriptor()
}

func (SwapType) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[5]
}

func (x SwapType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwapType.Descriptor instead.
func (SwapType) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{5}
}

// 选缺类型
type MissType int32

const (
	MissType_MISS_WAN  MissType = 0   // 万
	MissType_MISS_TIAO MissType = 16  // 条
	MissType_MISS_TONG MissType = 32  // 筒
	MissType_MISS_NULL MissType = 255 // 没有操作
)

// Enum value maps for MissType.
var (
	MissType_name = map[int32]string{
		0:   "MISS_WAN",
		16:  "MISS_TIAO",
		32:  "MISS_TONG",
		255: "MISS_NULL",
	}
	MissType_value = map[string]int32{
		"MISS_WAN":  0,
		"MISS_TIAO": 16,
		"MISS_TONG": 32,
		"MISS_NULL": 255,
	}
)

func (x MissType) Enum() *MissType {
	p := new(MissType)
	*p = x
	return p
}

func (x MissType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MissType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[6].Descriptor()
}

func (MissType) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[6]
}

func (x MissType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MissType.Descriptor instead.
func (MissType) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{6}
}

type AutoType int32

const (
	AutoType_TYPE_INVALID AutoType = 0 // 未知类型
	AutoType_TYPE_HOST    AutoType = 1 // 托管类型
	AutoType_TYPE_AUTO_HU AutoType = 2 // 自动胡
)

// Enum value maps for AutoType.
var (
	AutoType_name = map[int32]string{
		0: "TYPE_INVALID",
		1: "TYPE_HOST",
		2: "TYPE_AUTO_HU",
	}
	AutoType_value = map[string]int32{
		"TYPE_INVALID": 0,
		"TYPE_HOST":    1,
		"TYPE_AUTO_HU": 2,
	}
)

func (x AutoType) Enum() *AutoType {
	p := new(AutoType)
	*p = x
	return p
}

func (x AutoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutoType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[7].Descriptor()
}

func (AutoType) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[7]
}

func (x AutoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutoType.Descriptor instead.
func (AutoType) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{7}
}

type PlayerState int32

const (
	PlayerState_STATE_NULL  PlayerState = 0 // 无状态
	PlayerState_STATE_TING  PlayerState = 1 // 听牌状态
	PlayerState_STATE_IS_HU PlayerState = 2 // 胡牌状态
)

// Enum value maps for PlayerState.
var (
	PlayerState_name = map[int32]string{
		0: "STATE_NULL",
		1: "STATE_TING",
		2: "STATE_IS_HU",
	}
	PlayerState_value = map[string]int32{
		"STATE_NULL":  0,
		"STATE_TING":  1,
		"STATE_IS_HU": 2,
	}
)

func (x PlayerState) Enum() *PlayerState {
	p := new(PlayerState)
	*p = x
	return p
}

func (x PlayerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerState) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[8].Descriptor()
}

func (PlayerState) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[8]
}

func (x PlayerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerState.Descriptor instead.
func (PlayerState) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{8}
}

// 结算类型
type SettlementType int32

const (
	SettlementType_SETTLEMENT_INVALID SettlementType = 0 // 无效类型
	SettlementType_HU                 SettlementType = 1 // 胡类型
	SettlementType_MING_GANG          SettlementType = 2 // 明杠
	SettlementType_BU_GANG            SettlementType = 3 // 补杠
	SettlementType_AN_GANG            SettlementType = 4 // 暗杠
	SettlementType_ZHUANG_YI          SettlementType = 5 // 转移(杠炮后没有一炮多响则把上次杠的分收下)
	SettlementType_TUI_SHUI           SettlementType = 6 // 退税
	SettlementType_CHA_DA_JIAO        SettlementType = 7 // 查大叫
	SettlementType_CHA_HUA_ZHU        SettlementType = 8 // 查花猪
)

// Enum value maps for SettlementType.
var (
	SettlementType_name = map[int32]string{
		0: "SETTLEMENT_INVALID",
		1: "HU",
		2: "MING_GANG",
		3: "BU_GANG",
		4: "AN_GANG",
		5: "ZHUANG_YI",
		6: "TUI_SHUI",
		7: "CHA_DA_JIAO",
		8: "CHA_HUA_ZHU",
	}
	SettlementType_value = map[string]int32{
		"SETTLEMENT_INVALID": 0,
		"HU":                 1,
		"MING_GANG":          2,
		"BU_GANG":            3,
		"AN_GANG":            4,
		"ZHUANG_YI":          5,
		"TUI_SHUI":           6,
		"CHA_DA_JIAO":        7,
		"CHA_HUA_ZHU":        8,
	}
)

func (x SettlementType) Enum() *SettlementType {
	p := new(SettlementType)
	*p = x
	return p
}

func (x SettlementType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettlementType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[9].Descriptor()
}

func (SettlementType) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[9]
}

func (x SettlementType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettlementType.Descriptor instead.
func (SettlementType) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{9}
}

type EndType int32

const (
	EndType_UNKNOWN_END  EndType = 0 // 未知结算
	EndType_NORMAL_END   EndType = 1 // 正常结束
	EndType_ABNORMAL_END EndType = 2 // 非正常结束
	EndType_DRAW_END     EndType = 3 // 流局结束
)

// Enum value maps for EndType.
var (
	EndType_name = map[int32]string{
		0: "UNKNOWN_END",
		1: "NORMAL_END",
		2: "ABNORMAL_END",
		3: "DRAW_END",
	}
	EndType_value = map[string]int32{
		"UNKNOWN_END":  0,
		"NORMAL_END":   1,
		"ABNORMAL_END": 2,
		"DRAW_END":     3,
	}
)

func (x EndType) Enum() *EndType {
	p := new(EndType)
	*p = x
	return p
}

func (x EndType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_xlchmj_proto_enumTypes[10].Descriptor()
}

func (EndType) Type() protoreflect.EnumType {
	return &file_pb_xlchmj_proto_enumTypes[10]
}

func (x EndType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndType.Descriptor instead.
func (EndType) EnumDescriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{10}
}

// 玩家信息结构体
type PlayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId             uint32           `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`                                                        // 座位号
	UserId             uint32           `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                                        // 用户ID
	Gold               string           `protobuf:"bytes,3,opt,name=gold,proto3" json:"gold,omitempty"`                                                                           // 金豆
	Nickname           string           `protobuf:"bytes,4,opt,name=nickname,proto3" json:"nickname,omitempty"`                                                                   // 昵称
	AvatarAddr         string           `protobuf:"bytes,5,opt,name=avatar_addr,json=avatarAddr,proto3" json:"avatar_addr,omitempty"`                                             // 头像
	IconStyle          uint32           `protobuf:"varint,6,opt,name=icon_style,json=iconStyle,proto3" json:"icon_style,omitempty"`                                               // 装饰
	IsOnline           bool             `protobuf:"varint,7,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`                                                  // 是否在线
	Cards              *CardsInfo       `protobuf:"bytes,8,opt,name=cards,proto3" json:"cards,omitempty"`                                                                         // 玩家牌信息
	SwapStatus         bool             `protobuf:"varint,9,opt,name=swap_status,json=swapStatus,proto3" json:"swap_status,omitempty"`                                            // 换三张信息
	SwapDefaultCards   []uint32         `protobuf:"varint,11,rep,packed,name=swap_default_cards,json=swapDefaultCards,proto3" json:"swap_default_cards,omitempty"`                // 默认换的三张牌
	ChooseMissStatus   MissType         `protobuf:"varint,12,opt,name=choose_miss_status,json=chooseMissStatus,proto3,enum=mj_xlch.MissType" json:"choose_miss_status,omitempty"` // 选缺状态
	OperationalActions []*MahjongAction `protobuf:"bytes,13,rep,name=operational_actions,json=operationalActions,proto3" json:"operational_actions,omitempty"`                    // 玩家可操作动作
	HostStatus         bool             `protobuf:"varint,14,opt,name=host_status,json=hostStatus,proto3" json:"host_status,omitempty"`                                           // 托管状态
}

func (x *PlayerInfo) Reset() {
	*x = PlayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerInfo) ProtoMessage() {}

func (x *PlayerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerInfo.ProtoReflect.Descriptor instead.
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{0}
}

func (x *PlayerInfo) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *PlayerInfo) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PlayerInfo) GetGold() string {
	if x != nil {
		return x.Gold
	}
	return ""
}

func (x *PlayerInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *PlayerInfo) GetAvatarAddr() string {
	if x != nil {
		return x.AvatarAddr
	}
	return ""
}

func (x *PlayerInfo) GetIconStyle() uint32 {
	if x != nil {
		return x.IconStyle
	}
	return 0
}

func (x *PlayerInfo) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

func (x *PlayerInfo) GetCards() *CardsInfo {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *PlayerInfo) GetSwapStatus() bool {
	if x != nil {
		return x.SwapStatus
	}
	return false
}

func (x *PlayerInfo) GetSwapDefaultCards() []uint32 {
	if x != nil {
		return x.SwapDefaultCards
	}
	return nil
}

func (x *PlayerInfo) GetChooseMissStatus() MissType {
	if x != nil {
		return x.ChooseMissStatus
	}
	return MissType_MISS_WAN
}

func (x *PlayerInfo) GetOperationalActions() []*MahjongAction {
	if x != nil {
		return x.OperationalActions
	}
	return nil
}

func (x *PlayerInfo) GetHostStatus() bool {
	if x != nil {
		return x.HostStatus
	}
	return false
}

// 牌信息
type CardsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandCards []uint32         `protobuf:"varint,1,rep,packed,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"` // 手牌信息
	HandCount uint32           `protobuf:"varint,2,opt,name=hand_count,json=handCount,proto3" json:"hand_count,omitempty"`        // 手牌数量
	OpCard    uint32           `protobuf:"varint,3,opt,name=op_card,json=opCard,proto3" json:"op_card,omitempty"`                 // 摸得牌，没有为255
	Actions   []*MahjongAction `protobuf:"bytes,4,rep,name=actions,proto3" json:"actions,omitempty"`                              // 动作牌信息
	HuResult  []*HuResult      `protobuf:"bytes,5,rep,name=hu_result,json=huResult,proto3" json:"hu_result,omitempty"`            // 胡牌信息
	Discards  []uint32         `protobuf:"varint,6,rep,packed,name=discards,proto3" json:"discards,omitempty"`                    // 弃牌堆信息
}

func (x *CardsInfo) Reset() {
	*x = CardsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardsInfo) ProtoMessage() {}

func (x *CardsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardsInfo.ProtoReflect.Descriptor instead.
func (*CardsInfo) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{1}
}

func (x *CardsInfo) GetHandCards() []uint32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *CardsInfo) GetHandCount() uint32 {
	if x != nil {
		return x.HandCount
	}
	return 0
}

func (x *CardsInfo) GetOpCard() uint32 {
	if x != nil {
		return x.OpCard
	}
	return 0
}

func (x *CardsInfo) GetActions() []*MahjongAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CardsInfo) GetHuResult() []*HuResult {
	if x != nil {
		return x.HuResult
	}
	return nil
}

func (x *CardsInfo) GetDiscards() []uint32 {
	if x != nil {
		return x.Discards
	}
	return nil
}

// 请求桌子玩家信息
type GameDeskInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户ID
}

func (x *GameDeskInfoRequest) Reset() {
	*x = GameDeskInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDeskInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDeskInfoRequest) ProtoMessage() {}

func (x *GameDeskInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDeskInfoRequest.ProtoReflect.Descriptor instead.
func (*GameDeskInfoRequest) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{2}
}

func (x *GameDeskInfoRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// 广播玩家进入信息
type GamePlayerEnterInfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *PlayerInfo `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"` // 进入玩家信息
}

func (x *GamePlayerEnterInfoNotify) Reset() {
	*x = GamePlayerEnterInfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerEnterInfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerEnterInfoNotify) ProtoMessage() {}

func (x *GamePlayerEnterInfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerEnterInfoNotify.ProtoReflect.Descriptor instead.
func (*GamePlayerEnterInfoNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{3}
}

func (x *GamePlayerEnterInfoNotify) GetPlayer() *PlayerInfo {
	if x != nil {
		return x.Player
	}
	return nil
}

// 广播桌子信息
type GameDeskInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player       []*PlayerInfo `protobuf:"bytes,1,rep,name=player,proto3" json:"player,omitempty"`
	State        GameState     `protobuf:"varint,2,opt,name=state,proto3,enum=mj_xlch.GameState" json:"state,omitempty"`              // 桌子状态
	OperateSeat  uint32        `protobuf:"varint,3,opt,name=operate_seat,json=operateSeat,proto3" json:"operate_seat,omitempty"`      // 操作位子
	Duration     uint32        `protobuf:"varint,4,opt,name=duration,proto3" json:"duration,omitempty"`                               // 操作时间
	StackCount   uint32        `protobuf:"varint,5,opt,name=stack_count,json=stackCount,proto3" json:"stack_count,omitempty"`         // 牌堆数量信息
	BankerSeatId uint32        `protobuf:"varint,6,opt,name=banker_seat_id,json=bankerSeatId,proto3" json:"banker_seat_id,omitempty"` // 庄家位子
}

func (x *GameDeskInfoResponse) Reset() {
	*x = GameDeskInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDeskInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDeskInfoResponse) ProtoMessage() {}

func (x *GameDeskInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDeskInfoResponse.ProtoReflect.Descriptor instead.
func (*GameDeskInfoResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{4}
}

func (x *GameDeskInfoResponse) GetPlayer() []*PlayerInfo {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *GameDeskInfoResponse) GetState() GameState {
	if x != nil {
		return x.State
	}
	return GameState_UNKNOWN
}

func (x *GameDeskInfoResponse) GetOperateSeat() uint32 {
	if x != nil {
		return x.OperateSeat
	}
	return 0
}

func (x *GameDeskInfoResponse) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *GameDeskInfoResponse) GetStackCount() uint32 {
	if x != nil {
		return x.StackCount
	}
	return 0
}

func (x *GameDeskInfoResponse) GetBankerSeatId() uint32 {
	if x != nil {
		return x.BankerSeatId
	}
	return 0
}

// ----------------------准备----------------------
type GamePlayerReadyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GamePlayerReadyRequest) Reset() {
	*x = GamePlayerReadyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerReadyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerReadyRequest) ProtoMessage() {}

func (x *GamePlayerReadyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerReadyRequest.ProtoReflect.Descriptor instead.
func (*GamePlayerReadyRequest) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{5}
}

type GamePlayerReadyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State []bool `protobuf:"varint,1,rep,packed,name=state,proto3" json:"state,omitempty"` // 各个位子是否准备
}

func (x *GamePlayerReadyResponse) Reset() {
	*x = GamePlayerReadyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerReadyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerReadyResponse) ProtoMessage() {}

func (x *GamePlayerReadyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerReadyResponse.ProtoReflect.Descriptor instead.
func (*GamePlayerReadyResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{6}
}

func (x *GamePlayerReadyResponse) GetState() []bool {
	if x != nil {
		return x.State
	}
	return nil
}

// 通知游戏开始
type GameStartNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BankerSeatId uint32 `protobuf:"varint,1,opt,name=banker_seat_id,json=bankerSeatId,proto3" json:"banker_seat_id,omitempty"` // 庄家位子
}

func (x *GameStartNotify) Reset() {
	*x = GameStartNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameStartNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameStartNotify) ProtoMessage() {}

func (x *GameStartNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameStartNotify.ProtoReflect.Descriptor instead.
func (*GameStartNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{7}
}

func (x *GameStartNotify) GetBankerSeatId() uint32 {
	if x != nil {
		return x.BankerSeatId
	}
	return 0
}

// -----------------------发牌状态------------------------
type HandCardsInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandCards []uint32 `protobuf:"varint,1,rep,packed,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"` // 玩家手牌信息
	CatchCard uint32   `protobuf:"varint,2,opt,name=catch_card,json=catchCard,proto3" json:"catch_card,omitempty"`        // 玩家抓的牌255
	Count     uint32   `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`                                 // 玩家手牌数量
}

func (x *HandCardsInfo) Reset() {
	*x = HandCardsInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandCardsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandCardsInfo) ProtoMessage() {}

func (x *HandCardsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandCardsInfo.ProtoReflect.Descriptor instead.
func (*HandCardsInfo) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{8}
}

func (x *HandCardsInfo) GetHandCards() []uint32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *HandCardsInfo) GetCatchCard() uint32 {
	if x != nil {
		return x.CatchCard
	}
	return 0
}

func (x *HandCardsInfo) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GameDealHandCardsNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId        uint32           `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`                       // 座位号
	HandCardsInfo []*HandCardsInfo `protobuf:"bytes,2,rep,name=hand_cards_info,json=handCardsInfo,proto3" json:"hand_cards_info,omitempty"` // 各个玩家手牌信息
	StackCount    uint32           `protobuf:"varint,3,opt,name=stack_count,json=stackCount,proto3" json:"stack_count,omitempty"`           // 牌堆数量
}

func (x *GameDealHandCardsNotify) Reset() {
	*x = GameDealHandCardsNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameDealHandCardsNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameDealHandCardsNotify) ProtoMessage() {}

func (x *GameDealHandCardsNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameDealHandCardsNotify.ProtoReflect.Descriptor instead.
func (*GameDealHandCardsNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{9}
}

func (x *GameDealHandCardsNotify) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GameDealHandCardsNotify) GetHandCardsInfo() []*HandCardsInfo {
	if x != nil {
		return x.HandCardsInfo
	}
	return nil
}

func (x *GameDealHandCardsNotify) GetStackCount() uint32 {
	if x != nil {
		return x.StackCount
	}
	return 0
}

// 麻将吃碰杠胡动作结构体
type MahjongAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutSeatId     uint32        `protobuf:"varint,1,opt,name=out_seat_id,json=outSeatId,proto3" json:"out_seat_id,omitempty"`                                      // 出牌座位
	ActionType    ActionType    `protobuf:"varint,2,opt,name=action_type,json=actionType,proto3,enum=mj_xlch.ActionType" json:"action_type,omitempty"`             // 动作类型
	ExtensionType ActionExtType `protobuf:"varint,3,opt,name=extension_type,json=extensionType,proto3,enum=mj_xlch.ActionExtType" json:"extension_type,omitempty"` // 额外动作
	OpCard        uint32        `protobuf:"varint,4,opt,name=op_card,json=opCard,proto3" json:"op_card,omitempty"`                                                 // 操作牌
	DeleteCards   []uint32      `protobuf:"varint,5,rep,packed,name=delete_cards,json=deleteCards,proto3" json:"delete_cards,omitempty"`                           // 手牌中删除的牌
	CombineCards  []uint32      `protobuf:"varint,6,rep,packed,name=combine_cards,json=combineCards,proto3" json:"combine_cards,omitempty"`                        // 组合牌
	HuMultiple    string        `protobuf:"bytes,7,opt,name=hu_multiple,json=huMultiple,proto3" json:"hu_multiple,omitempty"`                                      // 胡牌倍数(只有胡才会显示)
}

func (x *MahjongAction) Reset() {
	*x = MahjongAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MahjongAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MahjongAction) ProtoMessage() {}

func (x *MahjongAction) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MahjongAction.ProtoReflect.Descriptor instead.
func (*MahjongAction) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{10}
}

func (x *MahjongAction) GetOutSeatId() uint32 {
	if x != nil {
		return x.OutSeatId
	}
	return 0
}

func (x *MahjongAction) GetActionType() ActionType {
	if x != nil {
		return x.ActionType
	}
	return ActionType_ACTION_INVALID
}

func (x *MahjongAction) GetExtensionType() ActionExtType {
	if x != nil {
		return x.ExtensionType
	}
	return ActionExtType_ACTION_EXT_NULL
}

func (x *MahjongAction) GetOpCard() uint32 {
	if x != nil {
		return x.OpCard
	}
	return 0
}

func (x *MahjongAction) GetDeleteCards() []uint32 {
	if x != nil {
		return x.DeleteCards
	}
	return nil
}

func (x *MahjongAction) GetCombineCards() []uint32 {
	if x != nil {
		return x.CombineCards
	}
	return nil
}

func (x *MahjongAction) GetHuMultiple() string {
	if x != nil {
		return x.HuMultiple
	}
	return ""
}

// 广播玩家手牌信息(发牌，吃碰杠牌)
type GameUpdateMahjongResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId     uint32            `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`                                            // 玩家座位号
	HandCard   []uint32          `protobuf:"varint,2,rep,packed,name=hand_card,json=handCard,proto3" json:"hand_card,omitempty"`                               // 玩家手牌
	OpCard     uint32            `protobuf:"varint,3,opt,name=op_card,json=opCard,proto3" json:"op_card,omitempty"`                                            // 操作牌(摸的牌,无的话为0xff)
	UpdateType UpdateMahjongType `protobuf:"varint,4,opt,name=update_type,json=updateType,proto3,enum=mj_xlch.UpdateMahjongType" json:"update_type,omitempty"` // 更新类型
	Actions    []*MahjongAction  `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions,omitempty"`                                                         // 玩家的动作
	Count      uint32            `protobuf:"varint,6,opt,name=count,proto3" json:"count,omitempty"`                                                            // 玩家牌数量
	Discard    []uint32          `protobuf:"varint,7,rep,packed,name=discard,proto3" json:"discard,omitempty"`                                                 // 弃牌堆
	HuResult   []*HuResult       `protobuf:"bytes,8,rep,name=hu_result,json=huResult,proto3" json:"hu_result,omitempty"`                                       // 胡牌数据
}

func (x *GameUpdateMahjongResponse) Reset() {
	*x = GameUpdateMahjongResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUpdateMahjongResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUpdateMahjongResponse) ProtoMessage() {}

func (x *GameUpdateMahjongResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUpdateMahjongResponse.ProtoReflect.Descriptor instead.
func (*GameUpdateMahjongResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{11}
}

func (x *GameUpdateMahjongResponse) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GameUpdateMahjongResponse) GetHandCard() []uint32 {
	if x != nil {
		return x.HandCard
	}
	return nil
}

func (x *GameUpdateMahjongResponse) GetOpCard() uint32 {
	if x != nil {
		return x.OpCard
	}
	return 0
}

func (x *GameUpdateMahjongResponse) GetUpdateType() UpdateMahjongType {
	if x != nil {
		return x.UpdateType
	}
	return UpdateMahjongType_UPDATE_INVALID
}

func (x *GameUpdateMahjongResponse) GetActions() []*MahjongAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *GameUpdateMahjongResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GameUpdateMahjongResponse) GetDiscard() []uint32 {
	if x != nil {
		return x.Discard
	}
	return nil
}

func (x *GameUpdateMahjongResponse) GetHuResult() []*HuResult {
	if x != nil {
		return x.HuResult
	}
	return nil
}

// -------------------换三张---------------------
// 通知玩家进行换牌选择
type GamePlayerSwapNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId       uint32   `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`                          // 玩家座位号
	Duration     uint32   `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`                                    // 操作时间
	DefaultCards []uint32 `protobuf:"varint,3,rep,packed,name=default_cards,json=defaultCards,proto3" json:"default_cards,omitempty"` // 默认换的三张牌
}

func (x *GamePlayerSwapNotify) Reset() {
	*x = GamePlayerSwapNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerSwapNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerSwapNotify) ProtoMessage() {}

func (x *GamePlayerSwapNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerSwapNotify.ProtoReflect.Descriptor instead.
func (*GamePlayerSwapNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{12}
}

func (x *GamePlayerSwapNotify) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerSwapNotify) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *GamePlayerSwapNotify) GetDefaultCards() []uint32 {
	if x != nil {
		return x.DefaultCards
	}
	return nil
}

// 玩家换牌请求
type GamePlayerSwapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId uint32   `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"` // 玩家座位号
	Cards  []uint32 `protobuf:"varint,2,rep,packed,name=cards,proto3" json:"cards,omitempty"`          // 要换的牌
}

func (x *GamePlayerSwapRequest) Reset() {
	*x = GamePlayerSwapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerSwapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerSwapRequest) ProtoMessage() {}

func (x *GamePlayerSwapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerSwapRequest.ProtoReflect.Descriptor instead.
func (*GamePlayerSwapRequest) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{13}
}

func (x *GamePlayerSwapRequest) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerSwapRequest) GetCards() []uint32 {
	if x != nil {
		return x.Cards
	}
	return nil
}

// 玩家换牌响应
type GamePlayerSwapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId    uint32   `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`                 // 换牌玩家
	SwapCards []uint32 `protobuf:"varint,2,rep,packed,name=swap_cards,json=swapCards,proto3" json:"swap_cards,omitempty"` // 选择的牌
}

func (x *GamePlayerSwapResponse) Reset() {
	*x = GamePlayerSwapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerSwapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerSwapResponse) ProtoMessage() {}

func (x *GamePlayerSwapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerSwapResponse.ProtoReflect.Descriptor instead.
func (*GamePlayerSwapResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{14}
}

func (x *GamePlayerSwapResponse) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerSwapResponse) GetSwapCards() []uint32 {
	if x != nil {
		return x.SwapCards
	}
	return nil
}

// 通知客户端换三张类型
type GameSwapResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SwapType  SwapType `protobuf:"varint,1,opt,name=swap_type,json=swapType,proto3,enum=mj_xlch.SwapType" json:"swap_type,omitempty"` // 交换类型
	SwapCards []uint32 `protobuf:"varint,2,rep,packed,name=swap_cards,json=swapCards,proto3" json:"swap_cards,omitempty"`             // 玩家手牌信息
}

func (x *GameSwapResultNotify) Reset() {
	*x = GameSwapResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSwapResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSwapResultNotify) ProtoMessage() {}

func (x *GameSwapResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSwapResultNotify.ProtoReflect.Descriptor instead.
func (*GameSwapResultNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{15}
}

func (x *GameSwapResultNotify) GetSwapType() SwapType {
	if x != nil {
		return x.SwapType
	}
	return SwapType_SWAP_TYPE_INVALID
}

func (x *GameSwapResultNotify) GetSwapCards() []uint32 {
	if x != nil {
		return x.SwapCards
	}
	return nil
}

// --------------------选缺-----------------------
// 通知玩家进行选缺
type GamePlayerChooseMissNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId   uint32 `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"` // 玩家座位号
	Duration uint32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`           // 操作时间
}

func (x *GamePlayerChooseMissNotify) Reset() {
	*x = GamePlayerChooseMissNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerChooseMissNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerChooseMissNotify) ProtoMessage() {}

func (x *GamePlayerChooseMissNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerChooseMissNotify.ProtoReflect.Descriptor instead.
func (*GamePlayerChooseMissNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{16}
}

func (x *GamePlayerChooseMissNotify) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerChooseMissNotify) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// 玩家选缺请求
type GamePlayerChooseMissRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId   uint32   `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`                             // 玩家座位号
	MissType MissType `protobuf:"varint,2,opt,name=miss_type,json=missType,proto3,enum=mj_xlch.MissType" json:"miss_type,omitempty"` // 选缺类型
}

func (x *GamePlayerChooseMissRequest) Reset() {
	*x = GamePlayerChooseMissRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerChooseMissRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerChooseMissRequest) ProtoMessage() {}

func (x *GamePlayerChooseMissRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerChooseMissRequest.ProtoReflect.Descriptor instead.
func (*GamePlayerChooseMissRequest) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{17}
}

func (x *GamePlayerChooseMissRequest) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerChooseMissRequest) GetMissType() MissType {
	if x != nil {
		return x.MissType
	}
	return MissType_MISS_WAN
}

// 选缺响应
type GamePlayerChooseMissResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status []bool `protobuf:"varint,1,rep,packed,name=status,proto3" json:"status,omitempty"` // 所有玩家的选择状态
}

func (x *GamePlayerChooseMissResponse) Reset() {
	*x = GamePlayerChooseMissResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerChooseMissResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerChooseMissResponse) ProtoMessage() {}

func (x *GamePlayerChooseMissResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerChooseMissResponse.ProtoReflect.Descriptor instead.
func (*GamePlayerChooseMissResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{18}
}

func (x *GamePlayerChooseMissResponse) GetStatus() []bool {
	if x != nil {
		return x.Status
	}
	return nil
}

// 广播选缺结果
type GamePlayerChooseMissResultNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MissType []MissType `protobuf:"varint,1,rep,packed,name=miss_type,json=missType,proto3,enum=mj_xlch.MissType" json:"miss_type,omitempty"` // 所有玩家的选择状态
}

func (x *GamePlayerChooseMissResultNotify) Reset() {
	*x = GamePlayerChooseMissResultNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerChooseMissResultNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerChooseMissResultNotify) ProtoMessage() {}

func (x *GamePlayerChooseMissResultNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerChooseMissResultNotify.ProtoReflect.Descriptor instead.
func (*GamePlayerChooseMissResultNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{19}
}

func (x *GamePlayerChooseMissResultNotify) GetMissType() []MissType {
	if x != nil {
		return x.MissType
	}
	return nil
}

// --------------------玩家摸牌---------------------------
// 玩家抓牌
type GamePlayerCatchCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId    uint32 `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`          // 玩家座位号
	Card      uint32 `protobuf:"varint,2,opt,name=card,proto3" json:"card,omitempty"`                            // 抓的牌
	LeftCount uint32 `protobuf:"varint,3,opt,name=left_count,json=leftCount,proto3" json:"left_count,omitempty"` // 牌堆剩余数量
}

func (x *GamePlayerCatchCard) Reset() {
	*x = GamePlayerCatchCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerCatchCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerCatchCard) ProtoMessage() {}

func (x *GamePlayerCatchCard) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerCatchCard.ProtoReflect.Descriptor instead.
func (*GamePlayerCatchCard) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{20}
}

func (x *GamePlayerCatchCard) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerCatchCard) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *GamePlayerCatchCard) GetLeftCount() uint32 {
	if x != nil {
		return x.LeftCount
	}
	return 0
}

// ------------------------玩家出牌-----------------------
// 通知玩家出牌
type GamePlayerOutCardNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId   uint32 `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"` // 玩家座位号
	Duration uint32 `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`           // 操作时间
}

func (x *GamePlayerOutCardNotify) Reset() {
	*x = GamePlayerOutCardNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerOutCardNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerOutCardNotify) ProtoMessage() {}

func (x *GamePlayerOutCardNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerOutCardNotify.ProtoReflect.Descriptor instead.
func (*GamePlayerOutCardNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{21}
}

func (x *GamePlayerOutCardNotify) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerOutCardNotify) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// 玩家出牌请求
type GamePlayerOutCardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId uint32 `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"` // 玩家座位号
	Card   uint32 `protobuf:"varint,2,opt,name=card,proto3" json:"card,omitempty"`                   // 玩家出牌
	IsAuto bool   `protobuf:"varint,3,opt,name=is_auto,json=isAuto,proto3" json:"is_auto,omitempty"` // 是否自动出牌（客户端不需要处理）
	Index  uint32 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"`                 // 出牌位子
}

func (x *GamePlayerOutCardRequest) Reset() {
	*x = GamePlayerOutCardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerOutCardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerOutCardRequest) ProtoMessage() {}

func (x *GamePlayerOutCardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerOutCardRequest.ProtoReflect.Descriptor instead.
func (*GamePlayerOutCardRequest) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{22}
}

func (x *GamePlayerOutCardRequest) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerOutCardRequest) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *GamePlayerOutCardRequest) GetIsAuto() bool {
	if x != nil {
		return x.IsAuto
	}
	return false
}

func (x *GamePlayerOutCardRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// 玩家出牌响应
type GamePlayerOutCardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId uint32 `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"` // 玩家座位号
	Card   uint32 `protobuf:"varint,2,opt,name=card,proto3" json:"card,omitempty"`                   // 玩家出牌
	Index  uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`                 // 出牌位子
}

func (x *GamePlayerOutCardResponse) Reset() {
	*x = GamePlayerOutCardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerOutCardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerOutCardResponse) ProtoMessage() {}

func (x *GamePlayerOutCardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerOutCardResponse.ProtoReflect.Descriptor instead.
func (*GamePlayerOutCardResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{23}
}

func (x *GamePlayerOutCardResponse) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerOutCardResponse) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *GamePlayerOutCardResponse) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// -------------提示玩家处理动作--------------
// 通知玩家处理动作
type GamePlayerActionNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId   uint32           `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"` // 玩家座位号
	Actions  []*MahjongAction `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`              // 玩家可操作动作
	Duration uint32           `protobuf:"varint,2,opt,name=duration,proto3" json:"duration,omitempty"`           // 操作时间
}

func (x *GamePlayerActionNotify) Reset() {
	*x = GamePlayerActionNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerActionNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerActionNotify) ProtoMessage() {}

func (x *GamePlayerActionNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerActionNotify.ProtoReflect.Descriptor instead.
func (*GamePlayerActionNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{24}
}

func (x *GamePlayerActionNotify) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerActionNotify) GetActions() []*MahjongAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *GamePlayerActionNotify) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

// 玩家处理动作请求
type GamePlayerActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId uint32         `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"` // 玩家座位号
	Action *MahjongAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`                // 玩家选择的动作
	IsAuto bool           `protobuf:"varint,3,opt,name=is_auto,json=isAuto,proto3" json:"is_auto,omitempty"` // 是否自动出牌（客户端不需要处理）
}

func (x *GamePlayerActionRequest) Reset() {
	*x = GamePlayerActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerActionRequest) ProtoMessage() {}

func (x *GamePlayerActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerActionRequest.ProtoReflect.Descriptor instead.
func (*GamePlayerActionRequest) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{25}
}

func (x *GamePlayerActionRequest) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerActionRequest) GetAction() *MahjongAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *GamePlayerActionRequest) GetIsAuto() bool {
	if x != nil {
		return x.IsAuto
	}
	return false
}

// 玩家处理动作响应
type GamePlayerActionResultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId uint32         `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"` // 玩家座位号
	Action *MahjongAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`                // 玩家选择的动作
}

func (x *GamePlayerActionResultResponse) Reset() {
	*x = GamePlayerActionResultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerActionResultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerActionResultResponse) ProtoMessage() {}

func (x *GamePlayerActionResultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerActionResultResponse.ProtoReflect.Descriptor instead.
func (*GamePlayerActionResultResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{26}
}

func (x *GamePlayerActionResultResponse) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerActionResultResponse) GetAction() *MahjongAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// 玩家请求托管
type GamePlayerAutoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatId uint32   `protobuf:"varint,1,opt,name=seat_id,json=seatId,proto3" json:"seat_id,omitempty"`     // 托管位子
	Type   AutoType `protobuf:"varint,2,opt,name=type,proto3,enum=mj_xlch.AutoType" json:"type,omitempty"` // 类型
	IsHost bool     `protobuf:"varint,3,opt,name=is_host,json=isHost,proto3" json:"is_host,omitempty"`     // true:选择;false:取消
}

func (x *GamePlayerAutoRequest) Reset() {
	*x = GamePlayerAutoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerAutoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerAutoRequest) ProtoMessage() {}

func (x *GamePlayerAutoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerAutoRequest.ProtoReflect.Descriptor instead.
func (*GamePlayerAutoRequest) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{27}
}

func (x *GamePlayerAutoRequest) GetSeatId() uint32 {
	if x != nil {
		return x.SeatId
	}
	return 0
}

func (x *GamePlayerAutoRequest) GetType() AutoType {
	if x != nil {
		return x.Type
	}
	return AutoType_TYPE_INVALID
}

func (x *GamePlayerAutoRequest) GetIsHost() bool {
	if x != nil {
		return x.IsHost
	}
	return false
}

// 所有玩家的托管状态
type GamePlayerAutoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsHost   []bool `protobuf:"varint,1,rep,packed,name=is_host,json=isHost,proto3" json:"is_host,omitempty"`         // 玩家托管状态 true:托管、false:没有托管
	IsAutoHu []bool `protobuf:"varint,2,rep,packed,name=is_auto_hu,json=isAutoHu,proto3" json:"is_auto_hu,omitempty"` // 玩家自动胡状态
}

func (x *GamePlayerAutoResponse) Reset() {
	*x = GamePlayerAutoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerAutoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerAutoResponse) ProtoMessage() {}

func (x *GamePlayerAutoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerAutoResponse.ProtoReflect.Descriptor instead.
func (*GamePlayerAutoResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{28}
}

func (x *GamePlayerAutoResponse) GetIsHost() []bool {
	if x != nil {
		return x.IsHost
	}
	return nil
}

func (x *GamePlayerAutoResponse) GetIsAutoHu() []bool {
	if x != nil {
		return x.IsAutoHu
	}
	return nil
}

// 玩家游戏过程中的状态信息
type GamePlayerStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State []PlayerState `protobuf:"varint,1,rep,packed,name=state,proto3,enum=mj_xlch.PlayerState" json:"state,omitempty"` // 所有玩家的状态（默认是0）
}

func (x *GamePlayerStatusResponse) Reset() {
	*x = GamePlayerStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GamePlayerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GamePlayerStatusResponse) ProtoMessage() {}

func (x *GamePlayerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GamePlayerStatusResponse.ProtoReflect.Descriptor instead.
func (*GamePlayerStatusResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{29}
}

func (x *GamePlayerStatusResponse) GetState() []PlayerState {
	if x != nil {
		return x.State
	}
	return nil
}

// ---------------------------胡牌数据----------------------------
type HuResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutSeatId  uint32   `protobuf:"varint,1,opt,name=out_seat_id,json=outSeatId,proto3" json:"out_seat_id,omitempty"`         // 出牌玩家
	HuCard     uint32   `protobuf:"varint,2,opt,name=hu_card,json=huCard,proto3" json:"hu_card,omitempty"`                    // 胡的牌
	HuPosition []uint32 `protobuf:"varint,3,rep,packed,name=hu_position,json=huPosition,proto3" json:"hu_position,omitempty"` // 胡牌类型
	Multiple   string   `protobuf:"bytes,4,opt,name=multiple,proto3" json:"multiple,omitempty"`                               // 胡牌倍数
}

func (x *HuResult) Reset() {
	*x = HuResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuResult) ProtoMessage() {}

func (x *HuResult) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuResult.ProtoReflect.Descriptor instead.
func (*HuResult) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{30}
}

func (x *HuResult) GetOutSeatId() uint32 {
	if x != nil {
		return x.OutSeatId
	}
	return 0
}

func (x *HuResult) GetHuCard() uint32 {
	if x != nil {
		return x.HuCard
	}
	return 0
}

func (x *HuResult) GetHuPosition() []uint32 {
	if x != nil {
		return x.HuPosition
	}
	return nil
}

func (x *HuResult) GetMultiple() string {
	if x != nil {
		return x.Multiple
	}
	return ""
}

// 胡牌信息
type HuInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandCards  []uint32         `protobuf:"varint,1,rep,packed,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"`    // 手牌
	HuCard     uint32           `protobuf:"varint,2,opt,name=hu_card,json=huCard,proto3" json:"hu_card,omitempty"`                    // 胡的牌
	Actions    []*MahjongAction `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`                                 // 动作牌
	HuPosition []uint32         `protobuf:"varint,4,rep,packed,name=hu_position,json=huPosition,proto3" json:"hu_position,omitempty"` // 胡牌类型
}

func (x *HuInfo) Reset() {
	*x = HuInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HuInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HuInfo) ProtoMessage() {}

func (x *HuInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HuInfo.ProtoReflect.Descriptor instead.
func (*HuInfo) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{31}
}

func (x *HuInfo) GetHandCards() []uint32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *HuInfo) GetHuCard() uint32 {
	if x != nil {
		return x.HuCard
	}
	return 0
}

func (x *HuInfo) GetActions() []*MahjongAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *HuInfo) GetHuPosition() []uint32 {
	if x != nil {
		return x.HuPosition
	}
	return nil
}

// 局内结算
type BureauSettlementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinSeatId      uint32         `protobuf:"varint,1,opt,name=win_seat_id,json=winSeatId,proto3" json:"win_seat_id,omitempty"`                                          // 赢分位子
	SettlementType SettlementType `protobuf:"varint,2,opt,name=settlement_type,json=settlementType,proto3,enum=mj_xlch.SettlementType" json:"settlement_type,omitempty"` // 结算类型
	OpCard         uint32         `protobuf:"varint,3,opt,name=op_card,json=opCard,proto3" json:"op_card,omitempty"`                                                     // 操作牌
	HuCardsInfo    *HuInfo        `protobuf:"bytes,4,opt,name=hu_cards_info,json=huCardsInfo,proto3" json:"hu_cards_info,omitempty"`                                     // 胡牌时手牌信息(杠则没有信息)
	InningScores   []string       `protobuf:"bytes,5,rep,name=inning_scores,json=inningScores,proto3" json:"inning_scores,omitempty"`                                    // 所有人的输赢分数(理论值)
	RealityScores  []string       `protobuf:"bytes,6,rep,name=reality_scores,json=realityScores,proto3" json:"reality_scores,omitempty"`                                 // 所有人的实际输赢金币(实际值)
	Multiple       string         `protobuf:"bytes,8,opt,name=multiple,proto3" json:"multiple,omitempty"`                                                                // 倍数
	IsCeiling      bool           `protobuf:"varint,9,opt,name=is_ceiling,json=isCeiling,proto3" json:"is_ceiling,omitempty"`                                            // 是否封顶
	IsBankruptcy   []bool         `protobuf:"varint,10,rep,packed,name=is_bankruptcy,json=isBankruptcy,proto3" json:"is_bankruptcy,omitempty"`                           // 是否破产
}

func (x *BureauSettlementInfo) Reset() {
	*x = BureauSettlementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BureauSettlementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BureauSettlementInfo) ProtoMessage() {}

func (x *BureauSettlementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BureauSettlementInfo.ProtoReflect.Descriptor instead.
func (*BureauSettlementInfo) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{32}
}

func (x *BureauSettlementInfo) GetWinSeatId() uint32 {
	if x != nil {
		return x.WinSeatId
	}
	return 0
}

func (x *BureauSettlementInfo) GetSettlementType() SettlementType {
	if x != nil {
		return x.SettlementType
	}
	return SettlementType_SETTLEMENT_INVALID
}

func (x *BureauSettlementInfo) GetOpCard() uint32 {
	if x != nil {
		return x.OpCard
	}
	return 0
}

func (x *BureauSettlementInfo) GetHuCardsInfo() *HuInfo {
	if x != nil {
		return x.HuCardsInfo
	}
	return nil
}

func (x *BureauSettlementInfo) GetInningScores() []string {
	if x != nil {
		return x.InningScores
	}
	return nil
}

func (x *BureauSettlementInfo) GetRealityScores() []string {
	if x != nil {
		return x.RealityScores
	}
	return nil
}

func (x *BureauSettlementInfo) GetMultiple() string {
	if x != nil {
		return x.Multiple
	}
	return ""
}

func (x *BureauSettlementInfo) GetIsCeiling() bool {
	if x != nil {
		return x.IsCeiling
	}
	return false
}

func (x *BureauSettlementInfo) GetIsBankruptcy() []bool {
	if x != nil {
		return x.IsBankruptcy
	}
	return nil
}

type GameBureauSettlementNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*BureauSettlementInfo `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"` // 结算分数
	Gold []string                `protobuf:"bytes,2,rep,name=gold,proto3" json:"gold,omitempty"` // 各个玩家携带金币数量
}

func (x *GameBureauSettlementNotify) Reset() {
	*x = GameBureauSettlementNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameBureauSettlementNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameBureauSettlementNotify) ProtoMessage() {}

func (x *GameBureauSettlementNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameBureauSettlementNotify.ProtoReflect.Descriptor instead.
func (*GameBureauSettlementNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{33}
}

func (x *GameBureauSettlementNotify) GetData() []*BureauSettlementInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GameBureauSettlementNotify) GetGold() []string {
	if x != nil {
		return x.Gold
	}
	return nil
}

// 单个玩家结算信息
type GameEndPersonalSettlementInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HandCards   []uint32         `protobuf:"varint,1,rep,packed,name=hand_cards,json=handCards,proto3" json:"hand_cards,omitempty"` // 所有玩家手牌信息
	Discards    []uint32         `protobuf:"varint,2,rep,packed,name=discards,proto3" json:"discards,omitempty"`                    // 所有玩家弃牌信息
	Actions     []*MahjongAction `protobuf:"bytes,3,rep,name=actions,proto3" json:"actions,omitempty"`                              // 所有玩家吃碰杠信息
	HuResult    []*HuResult      `protobuf:"bytes,4,rep,name=hu_result,json=huResult,proto3" json:"hu_result,omitempty"`            // 胡牌数据
	TotalScores string           `protobuf:"bytes,5,opt,name=total_scores,json=totalScores,proto3" json:"total_scores,omitempty"`   // 玩家总得分
	Gold        string           `protobuf:"bytes,6,opt,name=gold,proto3" json:"gold,omitempty"`                                    // 玩家金币数量
}

func (x *GameEndPersonalSettlementInfo) Reset() {
	*x = GameEndPersonalSettlementInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEndPersonalSettlementInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEndPersonalSettlementInfo) ProtoMessage() {}

func (x *GameEndPersonalSettlementInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEndPersonalSettlementInfo.ProtoReflect.Descriptor instead.
func (*GameEndPersonalSettlementInfo) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{34}
}

func (x *GameEndPersonalSettlementInfo) GetHandCards() []uint32 {
	if x != nil {
		return x.HandCards
	}
	return nil
}

func (x *GameEndPersonalSettlementInfo) GetDiscards() []uint32 {
	if x != nil {
		return x.Discards
	}
	return nil
}

func (x *GameEndPersonalSettlementInfo) GetActions() []*MahjongAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *GameEndPersonalSettlementInfo) GetHuResult() []*HuResult {
	if x != nil {
		return x.HuResult
	}
	return nil
}

func (x *GameEndPersonalSettlementInfo) GetTotalScores() string {
	if x != nil {
		return x.TotalScores
	}
	return ""
}

func (x *GameEndPersonalSettlementInfo) GetGold() string {
	if x != nil {
		return x.Gold
	}
	return ""
}

// 结束结算
type GameEndSettlementNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndType           EndType                          `protobuf:"varint,1,opt,name=end_type,json=endType,proto3,enum=mj_xlch.EndType" json:"end_type,omitempty"`         // 结束类型
	Data              []*GameEndPersonalSettlementInfo `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`                                                    // 结算分数
	BureauSettlements []*BureauSettlementInfo          `protobuf:"bytes,3,rep,name=bureau_settlements,json=bureauSettlements,proto3" json:"bureau_settlements,omitempty"` // 玩家局内结算信息
}

func (x *GameEndSettlementNotify) Reset() {
	*x = GameEndSettlementNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameEndSettlementNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameEndSettlementNotify) ProtoMessage() {}

func (x *GameEndSettlementNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameEndSettlementNotify.ProtoReflect.Descriptor instead.
func (*GameEndSettlementNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{35}
}

func (x *GameEndSettlementNotify) GetEndType() EndType {
	if x != nil {
		return x.EndType
	}
	return EndType_UNKNOWN_END
}

func (x *GameEndSettlementNotify) GetData() []*GameEndPersonalSettlementInfo {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GameEndSettlementNotify) GetBureauSettlements() []*BureauSettlementInfo {
	if x != nil {
		return x.BureauSettlements
	}
	return nil
}

// -------------------------更新玩家金币数------------------------
type GameUpdateGoldNumberNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gold []string `protobuf:"bytes,1,rep,name=gold,proto3" json:"gold,omitempty"` // 各个玩家携带金币数量
}

func (x *GameUpdateGoldNumberNotify) Reset() {
	*x = GameUpdateGoldNumberNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameUpdateGoldNumberNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameUpdateGoldNumberNotify) ProtoMessage() {}

func (x *GameUpdateGoldNumberNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameUpdateGoldNumberNotify.ProtoReflect.Descriptor instead.
func (*GameUpdateGoldNumberNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{36}
}

func (x *GameUpdateGoldNumberNotify) GetGold() []string {
	if x != nil {
		return x.Gold
	}
	return nil
}

// ---------------------------错误-------------------------------
// 错误响应
type GameErrorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"` // 错误码
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`    // 错误描述
}

func (x *GameErrorResponse) Reset() {
	*x = GameErrorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameErrorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameErrorResponse) ProtoMessage() {}

func (x *GameErrorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameErrorResponse.ProtoReflect.Descriptor instead.
func (*GameErrorResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{37}
}

func (x *GameErrorResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GameErrorResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type TingCard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card     uint32 `protobuf:"varint,1,opt,name=card,proto3" json:"card,omitempty"`        // 牌
	Count    uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`      // 牌数量
	Multiple string `protobuf:"bytes,3,opt,name=multiple,proto3" json:"multiple,omitempty"` // 倍数
}

func (x *TingCard) Reset() {
	*x = TingCard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TingCard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TingCard) ProtoMessage() {}

func (x *TingCard) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TingCard.ProtoReflect.Descriptor instead.
func (*TingCard) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{38}
}

func (x *TingCard) GetCard() uint32 {
	if x != nil {
		return x.Card
	}
	return 0
}

func (x *TingCard) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TingCard) GetMultiple() string {
	if x != nil {
		return x.Multiple
	}
	return ""
}

type TingCardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutCard  uint32      `protobuf:"varint,1,opt,name=out_card,json=outCard,proto3" json:"out_card,omitempty"`   // 出哪张牌
	TingCard []*TingCard `protobuf:"bytes,2,rep,name=ting_card,json=tingCard,proto3" json:"ting_card,omitempty"` // 听哪些牌
}

func (x *TingCardInfo) Reset() {
	*x = TingCardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TingCardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TingCardInfo) ProtoMessage() {}

func (x *TingCardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TingCardInfo.ProtoReflect.Descriptor instead.
func (*TingCardInfo) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{39}
}

func (x *TingCardInfo) GetOutCard() uint32 {
	if x != nil {
		return x.OutCard
	}
	return 0
}

func (x *TingCardInfo) GetTingCard() []*TingCard {
	if x != nil {
		return x.TingCard
	}
	return nil
}

// 3n+2手牌听牌提示
type GameTing3N2InfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TingCards []*TingCardInfo `protobuf:"bytes,2,rep,name=ting_cards,json=tingCards,proto3" json:"ting_cards,omitempty"` // 听哪些牌
}

func (x *GameTing3N2InfoNotify) Reset() {
	*x = GameTing3N2InfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameTing3N2InfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTing3N2InfoNotify) ProtoMessage() {}

func (x *GameTing3N2InfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTing3N2InfoNotify.ProtoReflect.Descriptor instead.
func (*GameTing3N2InfoNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{40}
}

func (x *GameTing3N2InfoNotify) GetTingCards() []*TingCardInfo {
	if x != nil {
		return x.TingCards
	}
	return nil
}

// 3n+1手牌听牌提示
type GameTing3N1InfoNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TingCard []*TingCard `protobuf:"bytes,2,rep,name=ting_card,json=tingCard,proto3" json:"ting_card,omitempty"` // 听哪些牌
}

func (x *GameTing3N1InfoNotify) Reset() {
	*x = GameTing3N1InfoNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameTing3N1InfoNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameTing3N1InfoNotify) ProtoMessage() {}

func (x *GameTing3N1InfoNotify) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameTing3N1InfoNotify.ProtoReflect.Descriptor instead.
func (*GameTing3N1InfoNotify) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{41}
}

func (x *GameTing3N1InfoNotify) GetTingCard() []*TingCard {
	if x != nil {
		return x.TingCard
	}
	return nil
}

type GameForceEndRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameForceEndRequest) Reset() {
	*x = GameForceEndRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameForceEndRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameForceEndRequest) ProtoMessage() {}

func (x *GameForceEndRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameForceEndRequest.ProtoReflect.Descriptor instead.
func (*GameForceEndRequest) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{42}
}

type GameForceEndResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameForceEndResponse) Reset() {
	*x = GameForceEndResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_xlchmj_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameForceEndResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameForceEndResponse) ProtoMessage() {}

func (x *GameForceEndResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_xlchmj_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameForceEndResponse.ProtoReflect.Descriptor instead.
func (*GameForceEndResponse) Descriptor() ([]byte, []int) {
	return file_pb_xlchmj_proto_rawDescGZIP(), []int{43}
}

var File_pb_xlchmj_proto protoreflect.FileDescriptor

var file_pb_xlchmj_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x62, 0x2f, 0x78, 0x6c, 0x63, 0x68, 0x6d, 0x6a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x22, 0xef, 0x03, 0x0a, 0x0a, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x69, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63,
	0x68, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x73, 0x77, 0x61, 0x70, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x3f, 0x0a, 0x12, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x5f, 0x6d, 0x69, 0x73, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e,
	0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x10, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x47, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe0, 0x01, 0x0a,
	0x09, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e,
	0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x68,
	0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x09, 0x68, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68,
	0x2e, 0x48, 0x75, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x68, 0x75, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x2e, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x48, 0x0a, 0x19, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x45, 0x6e, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2b, 0x0a, 0x06,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x22, 0xf3, 0x01, 0x0a, 0x14, 0x47, 0x61,
	0x6d, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x28, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x65, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x61, 0x6e,
	0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x22,
	0x18, 0x0a, 0x16, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x17, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x37, 0x0a, 0x0f, 0x47, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x61,
	0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x0d, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x17, 0x47, 0x61, 0x6d,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a,
	0x0f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68,
	0x2e, 0x48, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d,
	0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa6,
	0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x62, 0x69, 0x6e,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x5f, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x75, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x19, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x08, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6f,
	0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x70,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6d, 0x6a, 0x5f, 0x78,
	0x6c, 0x63, 0x68, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x68,
	0x6a, 0x6f, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x64, 0x69, 0x73, 0x63,
	0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x68, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68,
	0x2e, 0x48, 0x75, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x68, 0x75, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x70, 0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x53, 0x77, 0x61, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x46, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x61, 0x72, 0x64, 0x73, 0x22, 0x50, 0x0a,
	0x16, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x77, 0x61, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22,
	0x65, 0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x77, 0x61, 0x70, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x6a, 0x5f,
	0x78, 0x6c, 0x63, 0x68, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x73,
	0x77, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x77, 0x61,
	0x70, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x51, 0x0a, 0x1a, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x66, 0x0a, 0x1b, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d,
	0x69, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x36, 0x0a, 0x1c, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43,
	0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52, 0x0a, 0x20, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x68, 0x6f, 0x6f, 0x73, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2e, 0x0a,
	0x09, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a,
	0x13, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x43, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x72,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x4e, 0x0a, 0x17, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x76, 0x0a, 0x18, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73,
	0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x5e, 0x0a, 0x19, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x61,
	0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x7f, 0x0a, 0x16, 0x47, 0x61, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d,
	0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7b, 0x0a, 0x17, 0x47, 0x61, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x1e, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x68, 0x6a,
	0x6f, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x70, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x65, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73,
	0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x16, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x73, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x06,
	0x69, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x68, 0x75, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x48, 0x75, 0x22, 0x46, 0x0a, 0x18, 0x47, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x80, 0x01, 0x0a,
	0x08, 0x48, 0x75, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6f, 0x75, 0x74, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x75, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x75, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x75, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22,
	0x93, 0x01, 0x0a, 0x06, 0x48, 0x75, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61,
	0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09,
	0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x75, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x68, 0x75, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d, 0x61,
	0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x75, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x68, 0x75, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf2, 0x02, 0x0a, 0x14, 0x42, 0x75, 0x72, 0x65, 0x61, 0x75,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x69, 0x6e, 0x53, 0x65, 0x61, 0x74, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63,
	0x68, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6f, 0x70, 0x43, 0x61, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x0d, 0x68, 0x75, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x48, 0x75, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x68, 0x75, 0x43, 0x61, 0x72, 0x64, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x73,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x65, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x43, 0x65,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x6e, 0x6b,
	0x72, 0x75, 0x70, 0x74, 0x63, 0x79, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x42, 0x61, 0x6e, 0x6b, 0x72, 0x75, 0x70, 0x74, 0x63, 0x79, 0x22, 0x63, 0x0a, 0x1a, 0x47, 0x61,
	0x6d, 0x65, 0x42, 0x75, 0x72, 0x65, 0x61, 0x75, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68,
	0x2e, 0x42, 0x75, 0x72, 0x65, 0x61, 0x75, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x22,
	0xf3, 0x01, 0x0a, 0x1d, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x61, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e,
	0x0a, 0x09, 0x68, 0x75, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x48, 0x75, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x08, 0x68, 0x75, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x67, 0x6f, 0x6c, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x17, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x45, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d,
	0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x12, 0x62, 0x75,
	0x72, 0x65, 0x61, 0x75, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68,
	0x2e, 0x42, 0x75, 0x72, 0x65, 0x61, 0x75, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x62, 0x75, 0x72, 0x65, 0x61, 0x75, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x61, 0x6d, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x22, 0x39, 0x0a, 0x11, 0x47, 0x61,
	0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x50, 0x0a, 0x08, 0x54, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x59, 0x0a, 0x0c, 0x54, 0x69, 0x6e, 0x67, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x5f, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e,
	0x54, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x52, 0x08, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x72, 0x64, 0x22, 0x4d, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6e, 0x67, 0x33, 0x4e,
	0x32, 0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x54, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64,
	0x73, 0x22, 0x47, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x69, 0x6e, 0x67, 0x33, 0x4e, 0x31,
	0x49, 0x6e, 0x66, 0x6f, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x2e, 0x54, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x08, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x72, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x61,
	0x6d, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x16, 0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0xf8, 0x04, 0x0a, 0x03, 0x4d, 0x49,
	0x44, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x1d,
	0x0a, 0x18, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x91, 0x4e, 0x12, 0x0e, 0x0a,
	0x09, 0x44, 0x45, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x92, 0x4e, 0x12, 0x11, 0x0a,
	0x0c, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x93, 0x4e,
	0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x94,
	0x4e, 0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10,
	0x95, 0x4e, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x96, 0x4e, 0x12,
	0x26, 0x0a, 0x21, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x53, 0x5f, 0x44, 0x45, 0x54, 0x41, 0x49, 0x4c, 0x5f, 0x4e, 0x4f,
	0x54, 0x49, 0x46, 0x59, 0x10, 0x97, 0x4e, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x98, 0x4e, 0x12,
	0x10, 0x0a, 0x0b, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x99,
	0x4e, 0x12, 0x0e, 0x0a, 0x09, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x9a,
	0x4e, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0x9c, 0x4e, 0x12, 0x17, 0x0a, 0x12, 0x43, 0x48,
	0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59,
	0x10, 0x9d, 0x4e, 0x12, 0x15, 0x0a, 0x10, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x9e, 0x4e, 0x12, 0x1e, 0x0a, 0x19, 0x43, 0x48,
	0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xa0, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x55,
	0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xa1, 0x4e,
	0x12, 0x12, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x10, 0xa2, 0x4e, 0x12, 0x13, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xa4, 0x4e, 0x12, 0x11, 0x0a, 0x0c, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0xa5, 0x4e, 0x12, 0x14, 0x0a, 0x0f,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x33, 0x4e, 0x32, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10,
	0xa6, 0x4e, 0x12, 0x14, 0x0a, 0x0f, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x33, 0x4e, 0x31, 0x5f, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x59, 0x10, 0xa7, 0x4e, 0x12, 0x18, 0x0a, 0x12, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x45, 0x5f, 0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x99,
	0x9c, 0x01, 0x12, 0x16, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x41, 0x55, 0x54,
	0x4f, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x9a, 0x9c, 0x01, 0x12, 0x13, 0x0a, 0x0d, 0x50, 0x4c,
	0x41, 0x59, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x9c, 0x9c, 0x01, 0x12,
	0x13, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x10, 0x9d, 0x9c, 0x01, 0x12, 0x17, 0x0a, 0x11, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x42, 0x55, 0x52, 0x45, 0x41, 0x55, 0x10, 0x9e, 0x9c, 0x01, 0x12, 0x14, 0x0a,
	0x0e, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x9f, 0x9c, 0x01, 0x12, 0x0f, 0x0a, 0x09, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x4e, 0x44,
	0x10, 0xa1, 0x9c, 0x01, 0x2a, 0xa3, 0x01, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x49, 0x43, 0x45, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x44, 0x45, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x57, 0x41, 0x50, 0x10, 0x05, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x48, 0x4f, 0x4f, 0x53, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x10, 0x06, 0x12,
	0x08, 0x0a, 0x04, 0x50, 0x4c, 0x41, 0x59, 0x10, 0x07, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45,
	0x52, 0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x4e, 0x44, 0x10, 0x0a, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x41, 0x55, 0x53, 0x45, 0x10, 0x0b, 0x2a, 0x9f, 0x01, 0x0a, 0x11, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x57, 0x41, 0x50, 0x10, 0x02,
	0x12, 0x10, 0x0a, 0x0c, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x2a, 0x83, 0x01, 0x0a,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x49, 0x10, 0x02,
	0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x4e, 0x47, 0x10,
	0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x41, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x55, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x06, 0x2a, 0x5f, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58,
	0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x42, 0x55, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x41,
	0x4e, 0x10, 0x03, 0x2a, 0x61, 0x0a, 0x08, 0x53, 0x77, 0x61, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x57,
	0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x10, 0x02, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x57, 0x41, 0x50, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x45, 0x10, 0x03, 0x2a, 0x46, 0x0a, 0x08, 0x4d, 0x69, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x53, 0x53, 0x5f, 0x57, 0x41, 0x4e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x53, 0x53, 0x5f, 0x54, 0x49, 0x41, 0x4f, 0x10, 0x10, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x53, 0x53, 0x5f, 0x54, 0x4f, 0x4e, 0x47, 0x10, 0x20, 0x12, 0x0e,
	0x0a, 0x09, 0x4d, 0x49, 0x53, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0xff, 0x01, 0x2a, 0x3d,
	0x0a, 0x08, 0x41, 0x75, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x48, 0x55, 0x10, 0x02, 0x2a, 0x3e, 0x0a,
	0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x53, 0x5f, 0x48, 0x55, 0x10, 0x02, 0x2a, 0x98, 0x01,
	0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x48, 0x55, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x4e, 0x47, 0x5f, 0x47, 0x41, 0x4e, 0x47, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x42, 0x55, 0x5f, 0x47, 0x41, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x4e, 0x5f, 0x47, 0x41, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x5a, 0x48, 0x55,
	0x41, 0x4e, 0x47, 0x5f, 0x59, 0x49, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x55, 0x49, 0x5f,
	0x53, 0x48, 0x55, 0x49, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x5f, 0x44, 0x41,
	0x5f, 0x4a, 0x49, 0x41, 0x4f, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x48, 0x41, 0x5f, 0x48,
	0x55, 0x41, 0x5f, 0x5a, 0x48, 0x55, 0x10, 0x08, 0x2a, 0x4a, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45,
	0x4e, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x5f, 0x45,
	0x4e, 0x44, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x45,
	0x4e, 0x44, 0x10, 0x03, 0x42, 0x12, 0x5a, 0x03, 0x2f, 0x70, 0x62, 0xaa, 0x02, 0x0a, 0x70, 0x62,
	0x2e, 0x6d, 0x6a, 0x5f, 0x78, 0x6c, 0x63, 0x68, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_xlchmj_proto_rawDescOnce sync.Once
	file_pb_xlchmj_proto_rawDescData = file_pb_xlchmj_proto_rawDesc
)

func file_pb_xlchmj_proto_rawDescGZIP() []byte {
	file_pb_xlchmj_proto_rawDescOnce.Do(func() {
		file_pb_xlchmj_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_xlchmj_proto_rawDescData)
	})
	return file_pb_xlchmj_proto_rawDescData
}

var file_pb_xlchmj_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_pb_xlchmj_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_pb_xlchmj_proto_goTypes = []interface{}{
	(MID)(0),                                 // 0: mj_xlch.MID
	(GameState)(0),                           // 1: mj_xlch.GameState
	(UpdateMahjongType)(0),                   // 2: mj_xlch.UpdateMahjongType
	(ActionType)(0),                          // 3: mj_xlch.ActionType
	(ActionExtType)(0),                       // 4: mj_xlch.ActionExtType
	(SwapType)(0),                            // 5: mj_xlch.SwapType
	(MissType)(0),                            // 6: mj_xlch.MissType
	(AutoType)(0),                            // 7: mj_xlch.AutoType
	(PlayerState)(0),                         // 8: mj_xlch.PlayerState
	(SettlementType)(0),                      // 9: mj_xlch.SettlementType
	(EndType)(0),                             // 10: mj_xlch.EndType
	(*PlayerInfo)(nil),                       // 11: mj_xlch.PlayerInfo
	(*CardsInfo)(nil),                        // 12: mj_xlch.CardsInfo
	(*GameDeskInfoRequest)(nil),              // 13: mj_xlch.GameDeskInfoRequest
	(*GamePlayerEnterInfoNotify)(nil),        // 14: mj_xlch.GamePlayerEnterInfoNotify
	(*GameDeskInfoResponse)(nil),             // 15: mj_xlch.GameDeskInfoResponse
	(*GamePlayerReadyRequest)(nil),           // 16: mj_xlch.GamePlayerReadyRequest
	(*GamePlayerReadyResponse)(nil),          // 17: mj_xlch.GamePlayerReadyResponse
	(*GameStartNotify)(nil),                  // 18: mj_xlch.GameStartNotify
	(*HandCardsInfo)(nil),                    // 19: mj_xlch.HandCardsInfo
	(*GameDealHandCardsNotify)(nil),          // 20: mj_xlch.GameDealHandCardsNotify
	(*MahjongAction)(nil),                    // 21: mj_xlch.MahjongAction
	(*GameUpdateMahjongResponse)(nil),        // 22: mj_xlch.GameUpdateMahjongResponse
	(*GamePlayerSwapNotify)(nil),             // 23: mj_xlch.GamePlayerSwapNotify
	(*GamePlayerSwapRequest)(nil),            // 24: mj_xlch.GamePlayerSwapRequest
	(*GamePlayerSwapResponse)(nil),           // 25: mj_xlch.GamePlayerSwapResponse
	(*GameSwapResultNotify)(nil),             // 26: mj_xlch.GameSwapResultNotify
	(*GamePlayerChooseMissNotify)(nil),       // 27: mj_xlch.GamePlayerChooseMissNotify
	(*GamePlayerChooseMissRequest)(nil),      // 28: mj_xlch.GamePlayerChooseMissRequest
	(*GamePlayerChooseMissResponse)(nil),     // 29: mj_xlch.GamePlayerChooseMissResponse
	(*GamePlayerChooseMissResultNotify)(nil), // 30: mj_xlch.GamePlayerChooseMissResultNotify
	(*GamePlayerCatchCard)(nil),              // 31: mj_xlch.GamePlayerCatchCard
	(*GamePlayerOutCardNotify)(nil),          // 32: mj_xlch.GamePlayerOutCardNotify
	(*GamePlayerOutCardRequest)(nil),         // 33: mj_xlch.GamePlayerOutCardRequest
	(*GamePlayerOutCardResponse)(nil),        // 34: mj_xlch.GamePlayerOutCardResponse
	(*GamePlayerActionNotify)(nil),           // 35: mj_xlch.GamePlayerActionNotify
	(*GamePlayerActionRequest)(nil),          // 36: mj_xlch.GamePlayerActionRequest
	(*GamePlayerActionResultResponse)(nil),   // 37: mj_xlch.GamePlayerActionResultResponse
	(*GamePlayerAutoRequest)(nil),            // 38: mj_xlch.GamePlayerAutoRequest
	(*GamePlayerAutoResponse)(nil),           // 39: mj_xlch.GamePlayerAutoResponse
	(*GamePlayerStatusResponse)(nil),         // 40: mj_xlch.GamePlayerStatusResponse
	(*HuResult)(nil),                         // 41: mj_xlch.HuResult
	(*HuInfo)(nil),                           // 42: mj_xlch.HuInfo
	(*BureauSettlementInfo)(nil),             // 43: mj_xlch.BureauSettlementInfo
	(*GameBureauSettlementNotify)(nil),       // 44: mj_xlch.GameBureauSettlementNotify
	(*GameEndPersonalSettlementInfo)(nil),    // 45: mj_xlch.GameEndPersonalSettlementInfo
	(*GameEndSettlementNotify)(nil),          // 46: mj_xlch.GameEndSettlementNotify
	(*GameUpdateGoldNumberNotify)(nil),       // 47: mj_xlch.GameUpdateGoldNumberNotify
	(*GameErrorResponse)(nil),                // 48: mj_xlch.GameErrorResponse
	(*TingCard)(nil),                         // 49: mj_xlch.TingCard
	(*TingCardInfo)(nil),                     // 50: mj_xlch.TingCardInfo
	(*GameTing3N2InfoNotify)(nil),            // 51: mj_xlch.GameTing3N2InfoNotify
	(*GameTing3N1InfoNotify)(nil),            // 52: mj_xlch.GameTing3N1InfoNotify
	(*GameForceEndRequest)(nil),              // 53: mj_xlch.GameForceEndRequest
	(*GameForceEndResponse)(nil),             // 54: mj_xlch.GameForceEndResponse
}
var file_pb_xlchmj_proto_depIdxs = []int32{
	12, // 0: mj_xlch.PlayerInfo.cards:type_name -> mj_xlch.CardsInfo
	6,  // 1: mj_xlch.PlayerInfo.choose_miss_status:type_name -> mj_xlch.MissType
	21, // 2: mj_xlch.PlayerInfo.operational_actions:type_name -> mj_xlch.MahjongAction
	21, // 3: mj_xlch.CardsInfo.actions:type_name -> mj_xlch.MahjongAction
	41, // 4: mj_xlch.CardsInfo.hu_result:type_name -> mj_xlch.HuResult
	11, // 5: mj_xlch.GamePlayerEnterInfoNotify.player:type_name -> mj_xlch.PlayerInfo
	11, // 6: mj_xlch.GameDeskInfoResponse.player:type_name -> mj_xlch.PlayerInfo
	1,  // 7: mj_xlch.GameDeskInfoResponse.state:type_name -> mj_xlch.GameState
	19, // 8: mj_xlch.GameDealHandCardsNotify.hand_cards_info:type_name -> mj_xlch.HandCardsInfo
	3,  // 9: mj_xlch.MahjongAction.action_type:type_name -> mj_xlch.ActionType
	4,  // 10: mj_xlch.MahjongAction.extension_type:type_name -> mj_xlch.ActionExtType
	2,  // 11: mj_xlch.GameUpdateMahjongResponse.update_type:type_name -> mj_xlch.UpdateMahjongType
	21, // 12: mj_xlch.GameUpdateMahjongResponse.actions:type_name -> mj_xlch.MahjongAction
	41, // 13: mj_xlch.GameUpdateMahjongResponse.hu_result:type_name -> mj_xlch.HuResult
	5,  // 14: mj_xlch.GameSwapResultNotify.swap_type:type_name -> mj_xlch.SwapType
	6,  // 15: mj_xlch.GamePlayerChooseMissRequest.miss_type:type_name -> mj_xlch.MissType
	6,  // 16: mj_xlch.GamePlayerChooseMissResultNotify.miss_type:type_name -> mj_xlch.MissType
	21, // 17: mj_xlch.GamePlayerActionNotify.actions:type_name -> mj_xlch.MahjongAction
	21, // 18: mj_xlch.GamePlayerActionRequest.action:type_name -> mj_xlch.MahjongAction
	21, // 19: mj_xlch.GamePlayerActionResultResponse.action:type_name -> mj_xlch.MahjongAction
	7,  // 20: mj_xlch.GamePlayerAutoRequest.type:type_name -> mj_xlch.AutoType
	8,  // 21: mj_xlch.GamePlayerStatusResponse.state:type_name -> mj_xlch.PlayerState
	21, // 22: mj_xlch.HuInfo.actions:type_name -> mj_xlch.MahjongAction
	9,  // 23: mj_xlch.BureauSettlementInfo.settlement_type:type_name -> mj_xlch.SettlementType
	42, // 24: mj_xlch.BureauSettlementInfo.hu_cards_info:type_name -> mj_xlch.HuInfo
	43, // 25: mj_xlch.GameBureauSettlementNotify.data:type_name -> mj_xlch.BureauSettlementInfo
	21, // 26: mj_xlch.GameEndPersonalSettlementInfo.actions:type_name -> mj_xlch.MahjongAction
	41, // 27: mj_xlch.GameEndPersonalSettlementInfo.hu_result:type_name -> mj_xlch.HuResult
	10, // 28: mj_xlch.GameEndSettlementNotify.end_type:type_name -> mj_xlch.EndType
	45, // 29: mj_xlch.GameEndSettlementNotify.data:type_name -> mj_xlch.GameEndPersonalSettlementInfo
	43, // 30: mj_xlch.GameEndSettlementNotify.bureau_settlements:type_name -> mj_xlch.BureauSettlementInfo
	49, // 31: mj_xlch.TingCardInfo.ting_card:type_name -> mj_xlch.TingCard
	50, // 32: mj_xlch.GameTing3N2InfoNotify.ting_cards:type_name -> mj_xlch.TingCardInfo
	49, // 33: mj_xlch.GameTing3N1InfoNotify.ting_card:type_name -> mj_xlch.TingCard
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_pb_xlchmj_proto_init() }
func file_pb_xlchmj_proto_init() {
	if File_pb_xlchmj_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_xlchmj_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CardsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDeskInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerEnterInfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDeskInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerReadyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerReadyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameStartNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandCardsInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameDealHandCardsNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MahjongAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUpdateMahjongResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerSwapNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerSwapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerSwapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSwapResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerChooseMissNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerChooseMissRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerChooseMissResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerChooseMissResultNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerCatchCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerOutCardNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerOutCardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerOutCardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerActionNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerActionResultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerAutoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerAutoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GamePlayerStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HuInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BureauSettlementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameBureauSettlementNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEndPersonalSettlementInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameEndSettlementNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameUpdateGoldNumberNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameErrorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TingCard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TingCardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameTing3N2InfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameTing3N1InfoNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameForceEndRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_xlchmj_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameForceEndResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_xlchmj_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_xlchmj_proto_goTypes,
		DependencyIndexes: file_pb_xlchmj_proto_depIdxs,
		EnumInfos:         file_pb_xlchmj_proto_enumTypes,
		MessageInfos:      file_pb_xlchmj_proto_msgTypes,
	}.Build()
	File_pb_xlchmj_proto = out.File
	file_pb_xlchmj_proto_rawDesc = nil
	file_pb_xlchmj_proto_goTypes = nil
	file_pb_xlchmj_proto_depIdxs = nil
}
